include: 'https://gitlab-templates.ddbuild.io/slack-notifier/v1/template.yml'

stages:
  - package_build
  - testkitchen_deploy
  - testkitchen_testing
  - testkitchen_cleanup

variables:
  # The SRC_PATH is in the GOPATH of the builders which
  # currently is /go
  SRC_PATH: /go/src/github.com/DataDog/datadog-agent
  # Directory in which we execute the omnibus build.
  # For an unknown reason, it does not go well with
  # a ruby dependency if we build directly into $CI_PROJECT_DIR/.omnibus
  OMNIBUS_BASE_DIR: /.omnibus
  # Directory in which we put the artifacts after the build
  # Must be in $CI_PROJECT_DIR
  OMNIBUS_PACKAGE_DIR: $CI_PROJECT_DIR/.omnibus/pkg/
  # Directory in which we execute the omnibus build for SUSE
  # as we want to separate the RPM built for this distro.
  OMNIBUS_BASE_DIR_SUSE: /.omnibus/suse
  # Directory in which we put the artifacts after the build
  # Must be in $CI_PROJECT_DIR
  OMNIBUS_PACKAGE_DIR_SUSE: $CI_PROJECT_DIR/.omnibus/suse/pkg
  OMNIBUS_BASE_DIR_WIN: c:\omni-base\$CI_RUNNER_ID
  OMNIBUS_BASE_DIR_WIN_OMNIBUS: c:/omni-base/$CI_RUNNER_ID
  DD_AGENT_TESTING_DIR: $CI_PROJECT_DIR/test/kitchen
  STATIC_BINARIES_DIR: bin/static
  DOGSTATSD_BINARIES_DIR: bin/dogstatsd
  AGENT_BINARIES_DIR: bin/agent
  CLUSTER_AGENT_BINARIES_DIR: bin/datadog-cluster-agent
  DEB_S3_BUCKET: apt.datad0g.com
  RPM_S3_BUCKET: yum.datad0g.com
  WIN_S3_BUCKET: dd-agent-mstesting
  PROCESS_S3_BUCKET: datad0g-process-agent
  ANDROID_S3_BUCKET: dd-agent-androidtesting
  DEB_RPM_BUCKET_BRANCH: nightly  # branch of the DEB_S3_BUCKET and RPM_S3_BUCKET repos to release to, 'nightly' or 'beta'
  DEB_TESTING_S3_BUCKET: apttesting.datad0g.com
  RPM_TESTING_S3_BUCKET: yumtesting.datad0g.com
  WINDOWS_TESTING_S3_BUCKET_A6: $WIN_S3_BUCKET/pipelines/A6/$CI_PIPELINE_ID
  WINDOWS_TESTING_S3_BUCKET_A7: $WIN_S3_BUCKET/pipelines/A7/$CI_PIPELINE_ID
  WINDOWS_BUILDS_S3_BUCKET: $WIN_S3_BUCKET/builds
  ANDROID_BUILDS_S3_BUCKET: $ANDROID_S3_BUCKET/builds
  DEB_RPM_TESTING_BUCKET_BRANCH: testing  # branch of the DEB_TESTING_S3_BUCKET and RPM_TESTING_S3_BUCKET repos to release to, 'testing'
  DD_REPO_BRANCH_NAME: $CI_COMMIT_REF_NAME
  S3_CP_OPTIONS: --only-show-errors --region us-east-1 --sse AES256
  S3_CP_CMD: aws s3 cp $S3_CP_OPTIONS
  S3_ARTIFACTS_URI: s3://dd-ci-artefacts-build-stable/$CI_PROJECT_NAME/$CI_PIPELINE_ID
## comment out both lines below (S3_OMNIBUS_CACHE_BUCKET and USE_S3_CACHING) to allow
## build to succeed with S3 caching disabled.
  S3_OMNIBUS_CACHE_BUCKET: dd-ci-datadog-agent-omnibus-cache-build-stable
  USE_S3_CACHING: --omnibus-s3-cache
  S3_DSD6_URI: s3://dsd6-staging/linux
  RELEASE_VERSION_6: nightly
  RELEASE_VERSION_7: nightly
  DATADOG_AGENT_BUILDIMAGES: v2028839-bd64f94
  DATADOG_AGENT_BUILDERS: v2094059-961d8ff
  DATADOG_AGENT_WINBUILDIMAGES: v2068298-dc0e899
  DATADOG_AGENT_ARMBUILDIMAGES: v2028839-bd64f94


# Default before_script for all the jobs. If you create a new job and don't want this to execute
# you NEED to overwrite it.
before_script:
  - echo running default before_script
  - cd $SRC_PATH
  - pip install --upgrade --ignore-installed pip setuptools
  - pip install -r requirements.txt
  - inv -e deps --dep-vendor-only

#
# Trigger conditions
#

# run job only when triggered by an external tool (ex: Jenkins). This is used
# for jobs that run both on nightlies and tags
.run_when_triggered: &run_when_triggered
  only:
    - triggers


# anchor to trigger test kitchen setup, run, and cleanup (so all stages
# are run if one stage is run).  Triggers as defined:
# - master
# - tags (a tagged build)
# - triggers (as above, when triggered by an external tool like jenkins)
# - web (when the build is triggered by a specific build request through the
#        web interface.  This way, if a kitchen run is desired on a specific branch,
#        it can be triggered by requesting a specific build)
#
.run_when_testkitchen_triggered: &run_when_testkitchen_triggered
  except:
    - web

# run job only when triggered by an external tool (ex: Jenkins) and when
# RELEASE_VERSION_X is NOT "nightly". In this setting we are building either a
# new tagged version of the agent (an RC for example). In both cases the
# artifacts should be uploaded to our staging repository.

.run_when_triggered_on_tag_6: &run_when_triggered_on_tag_6
  only:
    refs:
      - triggers
  except: # we have to use except since gitlab doens't handle '!=' operator
    variables:
      - $RELEASE_VERSION_6 == "nightly"
      - $RELEASE_VERSION_6 == "" # no  RELEASE_VERSION means a nightly build for omnibus

.run_when_triggered_on_tag_7: &run_when_triggered_on_tag_7
  only:
    refs:
      - triggers
  except: # we have to use except since gitlab doens't handle '!=' operator
    variables:
      - $RELEASE_VERSION_7 == "nightly"
      - $RELEASE_VERSION_7 == "" # no  RELEASE_VERSION means a nightly build for omnibus

# run job only when triggered by an external tool (ex: Jenkins) and when
# RELEASE_VERSION_X is "nightly". In this setting we build from master and update
# the nightly build for windows, linux and docker.

.run_when_triggered_on_nightly: &run_when_triggered_on_nightly
  only:
    refs:
      - triggers
    variables:
      - $RELEASE_VERSION_6 == "nightly"
      - $RELEASE_VERSION_7 == "nightly"

# skip job only when triggered by an external tool (ex: Jenkins) and when
# BUILD_AGENT_X is set to "no".

.skip_when_unwanted_on_6: &skip_when_unwanted_on_6
  except:
    variables:
      - $RELEASE_VERSION_6 == ""

.skip_when_unwanted_on_7: &skip_when_unwanted_on_7
  except:
    variables:
      - $RELEASE_VERSION_7 == ""

#
# package_build
#
#
.agent_build_common_deb: &agent_build_common_deb
  script:
    - echo "About to build for $RELEASE_VERSION"
    # remove artifacts from previous pipelines that may come from the cache
    - rm -rf $OMNIBUS_PACKAGE_DIR/*
    # Artifacts and cache must live within project directory but we run omnibus in a neutral directory.
    # Thus, we move the artifacts at the end in a gitlab-friendly dir.
    # Use --skip-deps since the deps are installed by `before_script`.
    - inv -e agent.omnibus-build --release-version "$RELEASE_VERSION" --major-version "$AGENT_MAJOR_VERSION" --base-dir $OMNIBUS_BASE_DIR ${USE_S3_CACHING} --skip-deps
    - $S3_CP_CMD $OMNIBUS_BASE_DIR/pkg/datadog-agent_*_${PACKAGE_ARCH}.deb $S3_ARTIFACTS_URI/$DESTINATION_DEB
    - $S3_CP_CMD $OMNIBUS_BASE_DIR/pkg/datadog-agent-dbg_*_${PACKAGE_ARCH}.deb $S3_ARTIFACTS_URI/$DESTINATION_DBG_DEB
    - mkdir -p $OMNIBUS_PACKAGE_DIR && cp $OMNIBUS_BASE_DIR/pkg/datadog-agent*_${PACKAGE_ARCH}.deb{,.metadata.json} $OMNIBUS_PACKAGE_DIR
  # TODO: enabling the cache cause builds to be slower and slower on `master`. Re-enable once this is investigated/fixed
  # cache:
  #   # cache per branch
  #   key: $CI_COMMIT_REF_NAME
  #   paths:
  #     - $OMNIBUS_BASE_DIR
  artifacts:
    expire_in: 2 weeks
    paths:
      - $OMNIBUS_PACKAGE_DIR

# build Agent package for deb-x64
agent_deb-x64-a6:
  stage: package_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/deb_x64:$DATADOG_AGENT_BUILDIMAGES
  tags: [ "runner:main", "size:2xlarge" ]

  variables:
    AWS_CONTAINER_CREDENTIALS_RELATIVE_URI: /credentials
    CONDA_ENV: ddpy3
    AGENT_MAJOR_VERSION: 6
    PYTHON_RUNTIMES: '2,3'
    PACKAGE_ARCH: amd64
    DESTINATION_DEB: 'datadog-agent_6_amd64.deb'
    DESTINATION_DBG_DEB: 'datadog-agent-dbg_6_amd64.deb'
  before_script:
    - source /root/.bashrc && conda activate $CONDA_ENV
    - inv -e deps --verbose --dep-vendor-only
    - export RELEASE_VERSION=$RELEASE_VERSION_6
  <<: *skip_when_unwanted_on_6
  <<: *agent_build_common_deb

agent_deb-x64-a7:
  stage: package_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/deb_x64:$DATADOG_AGENT_BUILDIMAGES
  tags: [ "runner:main", "size:2xlarge" ]

  variables:
    AWS_CONTAINER_CREDENTIALS_RELATIVE_URI: /credentials
    CONDA_ENV: ddpy3
    AGENT_MAJOR_VERSION: 7
    PYTHON_RUNTIMES: '3'
    PACKAGE_ARCH: amd64
    DESTINATION_DEB: 'datadog-agent_7_amd64.deb'
    DESTINATION_DBG_DEB: 'datadog-agent-dbg_7_amd64.deb'
  before_script:
    - source /root/.bashrc && conda activate $CONDA_ENV
    - inv -e deps --verbose --dep-vendor-only
    - export RELEASE_VERSION=$RELEASE_VERSION_7
  <<: *skip_when_unwanted_on_7
  <<: *agent_build_common_deb

agent_deb-arm-a6:
  stage: package_build

  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/deb_arm64:$DATADOG_AGENT_ARMBUILDIMAGES
  tags: ["runner:docker-arm", "platform:arm64"]
  variables:
    AGENT_MAJOR_VERSION: 6
    PYTHON_RUNTIMES: '2,3'
    PACKAGE_ARCH: arm64
    DESTINATION_DEB: 'datadog-agent_6_arm64.deb'
    DESTINATION_DBG_DEB: 'datadog-agent-dbg_6_arm64.deb'
  before_script:
    - source /root/.bashrc
    - inv -e deps --verbose --dep-vendor-only
    - export RELEASE_VERSION=$RELEASE_VERSION_6
  <<: *skip_when_unwanted_on_6
  <<: *agent_build_common_deb

agent_deb-arm-a7:
  stage: package_build

  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/deb_arm64:$DATADOG_AGENT_ARMBUILDIMAGES
  tags: ["runner:docker-arm", "platform:arm64"]
  variables:
    AGENT_MAJOR_VERSION: 7
    PYTHON_RUNTIMES: '3'
    PACKAGE_ARCH: arm64
    DESTINATION_DEB: 'datadog-agent_7_arm64.deb'
    DESTINATION_DBG_DEB: 'datadog-agent-dbg_7_arm64.deb'
  before_script:
    - source /root/.bashrc
    - inv -e deps --verbose --dep-vendor-only
    - export RELEASE_VERSION=$RELEASE_VERSION_7
  <<: *skip_when_unwanted_on_7
  <<: *agent_build_common_deb

# build Agent package for deb-x64
puppy_deb-x64:
  stage: package_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/deb_x64:$DATADOG_AGENT_BUILDIMAGES
  tags: [ "runner:main", "size:2xlarge" ]

  variables:
    AWS_CONTAINER_CREDENTIALS_RELATIVE_URI: /credentials
  before_script:
    - source /root/.bashrc && conda activate ddpy3
    - inv -e deps --verbose --dep-vendor-only --no-checks
  <<: *skip_when_unwanted_on_7
  script:
    # remove artifacts from previous pipelines that may come from the cache
    - rm -rf $OMNIBUS_PACKAGE_DIR/*
    # Artifacts and cache must live within project directory but we run omnibus in a neutral directory.
    # Thus, we move the artifacts at the end in a gitlab-friendly dir.
    # Use --skip-deps since the deps are installed by `before_script`.
    - inv -e agent.omnibus-build --puppy --log-level debug --release-version "$RELEASE_VERSION_7" --major-version 7 --base-dir $OMNIBUS_BASE_DIR --skip-deps
    - find $OMNIBUS_BASE_DIR/pkg -name "datadog-puppy*_amd64.deb" -exec dpkg -c {} \;
    - $S3_CP_CMD $OMNIBUS_BASE_DIR/pkg/datadog-puppy*_amd64.deb $S3_ARTIFACTS_URI/datadog-puppy_amd64.deb
    - mkdir -p $OMNIBUS_PACKAGE_DIR && cp $OMNIBUS_BASE_DIR/pkg/datadog-puppy*_amd64.deb{,.metadata.json} $OMNIBUS_PACKAGE_DIR
  # TODO: enabling the cache cause builds to be slower and slower on `master`. Re-enable once this is investigated/fixed
  # cache:
  #   # cache per branch
  #   key: $CI_COMMIT_REF_NAME
  #   paths:
  #     - $OMNIBUS_BASE_DIR
  artifacts:
    expire_in: 2 weeks
    paths:
      - $OMNIBUS_PACKAGE_DIR

.agent_build_common_rpm: &agent_build_common_rpm
  script:
    - echo "About to build for $RELEASE_VERSION"
    # remove artifacts from previous pipelines that may come from the cache
    - rm -rf $OMNIBUS_PACKAGE_DIR/*
    # Artifacts and cache must live within project directory but we run omnibus in a neutral directory.
    # Thus, we move the artifacts at the end in a gitlab-friendly dir.
    - set +x
    - RPM_GPG_KEY=$(aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.rpm_signing_private_key_e09422b3 --with-decryption --query "Parameter.Value" --out text)
    - printf -- "$RPM_GPG_KEY" | gpg --import --batch
    - export RPM_SIGNING_PASSPHRASE=$(aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.rpm_signing_key_passphrase_e09422b3 --with-decryption --query "Parameter.Value" --out text)
    - set -x
    # use --skip-deps since the deps are installed by `before_script`
    - inv -e agent.omnibus-build --release-version "$RELEASE_VERSION" --major-version "$AGENT_MAJOR_VERSION" --base-dir $OMNIBUS_BASE_DIR  ${USE_S3_CACHING} --skip-deps
    - find $OMNIBUS_BASE_DIR/pkg -type f -name '*.rpm' ! -name '*dbg*.rpm' -print0 | xargs -0 -I '{}' rpm -i '{}'
    - find $OMNIBUS_BASE_DIR/pkg -type f -name '*dbg*.rpm' -print0 | xargs -0 -I '{}' rpm -i '{}'
    - mkdir -p $OMNIBUS_PACKAGE_DIR && cp $OMNIBUS_BASE_DIR/pkg/*.{rpm,metadata.json} $OMNIBUS_PACKAGE_DIR
  # TODO: enabling the cache cause builds to be slower and slower on `master`. Re-enable once this is investigated/fixed
  # cache:
  #   # cache per branch
  #   key: $CI_COMMIT_REF_NAME
  #   paths:
  #     - $OMNIBUS_BASE_DIR
  artifacts:
    expire_in: 2 weeks
    paths:
      - $OMNIBUS_PACKAGE_DIR

# build Agent package for rpm-x64
agent_rpm-x64-a6:
  stage: package_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/rpm_x64:$DATADOG_AGENT_BUILDIMAGES
  tags: [ "runner:main", "size:2xlarge" ]
  variables:
    AWS_CONTAINER_CREDENTIALS_RELATIVE_URI: /credentials
    AGENT_MAJOR_VERSION: 6
    PYTHON_RUNTIMES: '2,3'
    CONDA_ENV: ddpy3
  before_script:
    - source /root/.bashrc && conda activate $CONDA_ENV
    - inv -e deps --verbose --dep-vendor-only
    - export RELEASE_VERSION=$RELEASE_VERSION_6
  <<: *skip_when_unwanted_on_6
  <<: *agent_build_common_rpm

# build Agent package for rpm-x64
agent_rpm-x64-a7:
  stage: package_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/rpm_x64:$DATADOG_AGENT_BUILDIMAGES
  tags: [ "runner:main", "size:2xlarge" ]
  variables:
    AWS_CONTAINER_CREDENTIALS_RELATIVE_URI: /credentials
    AGENT_MAJOR_VERSION: 7
    PYTHON_RUNTIMES: '3'
    CONDA_ENV: ddpy3
  before_script:
    - source /root/.bashrc && conda activate $CONDA_ENV
    - inv -e deps --verbose --dep-vendor-only
    - export RELEASE_VERSION=$RELEASE_VERSION_7
  <<: *skip_when_unwanted_on_7
  <<: *agent_build_common_rpm

  # build Agent package for rpm-x64
agent_rpm-arm-a6:
  stage: package_build

  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/rpm_arm64:$DATADOG_AGENT_ARMBUILDIMAGES
  tags: ["runner:docker-arm", "platform:arm64"]
  variables:
    AGENT_MAJOR_VERSION: 6
    PYTHON_RUNTIMES: '2,3'
  before_script:
    - source /root/.bashrc
    - inv -e deps --verbose --dep-vendor-only
    - export RELEASE_VERSION=$RELEASE_VERSION_6
  <<: *skip_when_unwanted_on_6
  <<: *agent_build_common_rpm

# build Agent package for rpm-x64
agent_rpm-arm-a7:
  stage: package_build

  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/rpm_arm64:$DATADOG_AGENT_ARMBUILDIMAGES
  tags: ["runner:docker-arm", "platform:arm64"]
  variables:
    AGENT_MAJOR_VERSION: 7
    PYTHON_RUNTIMES: '3'
  before_script:
    - source /root/.bashrc
    - inv -e deps --verbose --dep-vendor-only
    - export RELEASE_VERSION=$RELEASE_VERSION_7
  <<: *skip_when_unwanted_on_7
  <<: *agent_build_common_rpm


.agent_build_common_suse_rpm: &agent_build_common_suse_rpm
  script:
    - echo "About to build for $RELEASE_VERSION"
    # remove artifacts from previous pipelines that may come from the cache
    - rm -rf $OMNIBUS_PACKAGE_DIR_SUSE/*
    # Artifacts and cache must live within project directory but we run omnibus in a neutral directory.
    # Thus, we move the artifacts at the end in a gitlab-friendly dir.
    - set +x
    - RPM_GPG_KEY=$(aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.rpm_signing_private_key_e09422b3 --with-decryption --query "Parameter.Value" --out text)
    - printf -- "$RPM_GPG_KEY" | gpg --import --batch
    - export RPM_SIGNING_PASSPHRASE=$(aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.rpm_signing_key_passphrase_e09422b3 --with-decryption --query "Parameter.Value" --out text)
    - set -x
    # use --skip-deps since the deps are installed by `before_script`
    - inv -e agent.omnibus-build --release-version "$RELEASE_VERSION" --major-version "$AGENT_MAJOR_VERSION" --base-dir $OMNIBUS_BASE_DIR_SUSE ${USE_S3_CACHING} --skip-deps
    - find $OMNIBUS_BASE_DIR_SUSE/pkg -type f -name '*.rpm' ! -name '*dbg*.rpm' -print0 | xargs -0 -I '{}' zypper in '{}'
    - find $OMNIBUS_BASE_DIR_SUSE/pkg -type f -name '*dbg*.rpm' -print0 | xargs -0 -I '{}' zypper in '{}'
    - mkdir -p $OMNIBUS_PACKAGE_DIR_SUSE && cp $OMNIBUS_BASE_DIR_SUSE/pkg/*.{rpm,metadata.json} $OMNIBUS_PACKAGE_DIR_SUSE
    # FIXME: skip the installation step until we fix the preinst/postinst scripts in the rpm package
    # to also work with SUSE11
    # - rpm -i $OMNIBUS_PACKAGE_DIR_SUSE/*.rpm
  # TODO: enabling the cache cause builds to be slower and slower on `master`. Re-enable once this is investigated/fixed
  # cache:
  #   # cache per branch
  #   key: $CI_COMMIT_REF_NAME
  #   paths:
  #     - $OMNIBUS_BASE_DIR_SUSE
  artifacts:
    expire_in: 2 weeks
    paths:
      - $OMNIBUS_PACKAGE_DIR_SUSE

# build Agent package for suse-x64
agent_suse-x64-a6:
  stage: package_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-builders/suse_x64:$DATADOG_AGENT_BUILDERS
  tags: [ "runner:main", "size:2xlarge" ]
  variables:
    AWS_CONTAINER_CREDENTIALS_RELATIVE_URI: /credentials
    AGENT_MAJOR_VERSION: 6
    PYTHON_RUNTIMES: '2,3'
  before_script:
    - export RELEASE_VERSION=$RELEASE_VERSION_6
    - inv -e deps --verbose --dep-vendor-only
  <<: *skip_when_unwanted_on_6
  <<: *agent_build_common_suse_rpm

# build Agent package for suse-x64
agent_suse-x64-a7:
  stage: package_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-builders/suse_x64:$DATADOG_AGENT_BUILDERS
  tags: [ "runner:main", "size:2xlarge" ]
  variables:
    AWS_CONTAINER_CREDENTIALS_RELATIVE_URI: /credentials
    AGENT_MAJOR_VERSION: 7
    PYTHON_RUNTIMES: '3'
  before_script:
    - export RELEASE_VERSION=$RELEASE_VERSION_7
    - inv -e deps --verbose --dep-vendor-only
  <<: *skip_when_unwanted_on_7
  <<: *agent_build_common_suse_rpm



##
## windows dockerized builds
##

.windows_msi_base:
  stage: package_build

  tags: ["runner:windows-docker", "windowsversion:1809"]
  # Unavailable on gitlab < 12.3
  # timeout: 2h 00m
  script:
    - if (Test-Path .omnibus) { remove-item -recurse -force .omnibus }
    - if (Test-Path build-out) { remove-item -recurse -force build-out }
    - mkdir .omnibus\pkg
    - docker run --rm -m 4096M -v "$(Get-Location):c:\mnt" -e CI_JOB_ID=${CI_JOB_ID} -e OMNIBUS_TARGET=${OMNIBUS_TARGET} -e WINDOWS_BUILDER=true -e PYTHON_RUNTIMES=${PYTHON_RUNTIMES} -e IS_AWS_CONTAINER=true -e SIGN_WINDOWS=true 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-builders/windows_${ARCH}:$Env:DATADOG_AGENT_WINBUILDIMAGES c:\mnt\tasks\winbuildscripts\buildwin.bat  $RELEASE_VERSION $AGENT_MAJOR_VERSION
    - copy build-out\${CI_JOB_ID}\*.msi .omnibus\pkg
    - if (Test-Path build-out\${CI_JOB_ID}\*.zip) { copy build-out\${CI_JOB_ID}\*.zip .omnibus\pkg }
    - remove-item -recurse -force build-out\${CI_JOB_ID}
    - get-childitem build-out
    - get-childitem .omnibus\pkg
  artifacts:
    expire_in: 2 weeks
    paths:
      - .omnibus/pkg

.windows_main_agent_base:
  extends: .windows_msi_base
  variables:
    OMNIBUS_TARGET: main

windows_msi_x64-a7:
  extends: .windows_main_agent_base
  variables:
    ARCH: "x64"
    AGENT_MAJOR_VERSION: 7
    PYTHON_RUNTIMES: '3'
  before_script:
    - set RELEASE_VERSION $RELEASE_VERSION_7
  <<: *skip_when_unwanted_on_7

windows_msi_x86-a7:
  extends: .windows_main_agent_base
  variables:
    ARCH: "x86"
    AGENT_MAJOR_VERSION: 7
    PYTHON_RUNTIMES: '3'
  before_script:
    - set RELEASE_VERSION $RELEASE_VERSION_7
  <<: *skip_when_unwanted_on_7

windows_msi_x64-a6:
  extends: .windows_main_agent_base
  variables:
    ARCH: "x64"
    AGENT_MAJOR_VERSION: 6
    PYTHON_RUNTIMES: '2,3'
  before_script:
    - set RELEASE_VERSION $RELEASE_VERSION_6
  <<: *skip_when_unwanted_on_6

windows_msi_x86-a6:
  extends: .windows_main_agent_base
  variables:
    ARCH: "x86"
    AGENT_MAJOR_VERSION: 6
    PYTHON_RUNTIMES: '2,3'
  before_script:
    - set RELEASE_VERSION $RELEASE_VERSION_6
  <<: *skip_when_unwanted_on_6

.windows_puppy_agent_base:
  extends: .windows_msi_base
  variables:
    OMNIBUS_TARGET: puppy

windows_puppy_msi_x64-a7:
  extends: .windows_puppy_agent_base
  variables:
    ARCH: "x64"
    PYTHON_RUNTIMES: '3'
    AGENT_MAJOR_VERSION: '7'
  before_script:
    - set RELEASE_VERSION $RELEASE_VERSION_7
  <<: *skip_when_unwanted_on_7

windows_puppy_msi_x86-a7:
  extends: .windows_puppy_agent_base
  variables:
    ARCH: "x86"
    PYTHON_RUNTIMES: '3'
    AGENT_MAJOR_VERSION: '7'
  before_script:
    - set RELEASE_VERSION $RELEASE_VERSION_7
  <<: *skip_when_unwanted_on_7


# build dogstatsd package for Windows
windows_dsd_msi_x64:
  extends: .windows_msi_base
  variables:
    ARCH: "x64"
    PYTHON_RUNTIMES: ""
    AGENT_MAJOR_VERSION: '7'
    OMNIBUS_TARGET: dogstatsd
  before_script:
    - set RELEASE_VERSION $RELEASE_VERSION_7

# build Agent package for android
agent_android_apk:
  stage: package_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-builders/android_builder:$DATADOG_AGENT_BUILDERS
  tags: [ "runner:main", "size:large" ]
  variables:
    AWS_CONTAINER_CREDENTIALS_RELATIVE_URI: /credentials
  <<: *skip_when_unwanted_on_7
  before_script:
    - echo running android before_script
    - cd $SRC_PATH
    - pip install -U pip
    - pip install -r requirements.txt
    - inv -e deps --android --dep-vendor-only --no-checks
    # Some Android license has changed, we have to accept the new version.
    # But on top of that, there is a bug in sdkmanager not updating correctly
    # the existing license, so, we have to manually accept the new license.
    # https://issuetracker.google.com/issues/123054726
    # The real fix will be to change the builders
    - echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" > "$ANDROID_HOME/licenses/android-sdk-license"
  script:
    # remove artifacts from previous pipelines that may come from the cache
    - rm -rf $OMNIBUS_PACKAGE_DIR/*
    # for now do the steps manually.  Should eventually move this to an invoke
    # task
    - inv -e android.build --major-version 7
    - mkdir -p $OMNIBUS_PACKAGE_DIR
    - cp ./bin/agent/ddagent-*-unsigned.apk $OMNIBUS_PACKAGE_DIR
  artifacts:
    expire_in: 2 weeks
    paths:
      - $OMNIBUS_PACKAGE_DIR

# build Dogstastd package for deb-x64
dogstatsd_deb-x64:
  stage: package_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/deb_x64:$DATADOG_AGENT_BUILDIMAGES
  tags: [ "runner:main", "size:large" ]
  <<: *skip_when_unwanted_on_7
  variables:
    AWS_CONTAINER_CREDENTIALS_RELATIVE_URI: /credentials
  before_script:
    - source /root/.bashrc && conda activate ddpy3
    - inv -e deps --verbose --dep-vendor-only
  script:
    # remove artifacts from previous pipelines that may come from the cache
    - rm -rf $OMNIBUS_PACKAGE_DIR/*
    # Artifacts and cache must live within project directory but we run omnibus in a neutral directory.
    # Thus, we move the artifacts at the end in a gitlab-friendly dir.
    # Use --skip-deps since the deps are installed by `before_script`.
    - inv -e dogstatsd.omnibus-build --release-version "$RELEASE_VERSION_7" --major-version 7 --base-dir $OMNIBUS_BASE_DIR ${USE_S3_CACHING} --skip-deps
    - find $OMNIBUS_BASE_DIR/pkg -name "datadog-dogstatsd*_amd64.deb" -exec dpkg -c {} \;
    - $S3_CP_CMD $OMNIBUS_BASE_DIR/pkg/datadog-dogstatsd*_amd64.deb $S3_ARTIFACTS_URI/datadog-dogstatsd_amd64.deb
    - mkdir -p $OMNIBUS_PACKAGE_DIR && cp $OMNIBUS_BASE_DIR/pkg/datadog-dogstatsd*_amd64.deb{,.metadata.json} $OMNIBUS_PACKAGE_DIR
  # TODO: enabling the cache cause builds to be slower and slower on `master`. Re-enable once this is investigated/fixed
  # cache:
  #   # cache per branch
  #   key: $CI_COMMIT_REF_NAME
  #   paths:
  #     - $OMNIBUS_BASE_DIR
  artifacts:
    expire_in: 2 weeks
    paths:
      - $OMNIBUS_PACKAGE_DIR

# build Dogstastd package for rpm-x64
dogstatsd_rpm-x64:
  stage: package_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/rpm_x64:$DATADOG_AGENT_BUILDIMAGES
  tags: [ "runner:main", "size:large" ]
  <<: *skip_when_unwanted_on_7
  variables:
    AWS_CONTAINER_CREDENTIALS_RELATIVE_URI: /credentials
  before_script:
    - source /root/.bashrc && conda activate ddpy3
    - inv -e deps --verbose --dep-vendor-only
  script:
    # remove artifacts from previous pipelines that may come from the cache
    - rm -rf $OMNIBUS_PACKAGE_DIR/*
    # Artifacts and cache must live within project directory but we run omnibus
    # from the GOPATH (see above). We then call `invoke` passing --base-dir,
    # pointing to a gitlab-friendly location.
    - set +x
    - RPM_GPG_KEY=$(aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.rpm_signing_private_key --with-decryption --query "Parameter.Value" --out text)
    - printf -- "$RPM_GPG_KEY" | gpg --import --batch
    - export RPM_SIGNING_PASSPHRASE=$(aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.rpm_signing_key_passphrase --with-decryption --query "Parameter.Value" --out text)
    - set -x
    # Use --skip-deps since the deps are installed by `before_script`.
    - inv -e dogstatsd.omnibus-build --release-version "$RELEASE_VERSION_7" --major-version 7 --base-dir $OMNIBUS_BASE_DIR ${USE_S3_CACHING} --skip-deps
    - find $OMNIBUS_BASE_DIR/pkg -type f -name '*.rpm' -print0 | sort -z | xargs -0 -I '{}' rpm -i '{}'
    - mkdir -p $OMNIBUS_PACKAGE_DIR && cp $OMNIBUS_BASE_DIR/pkg/*.{rpm,metadata.json} $OMNIBUS_PACKAGE_DIR
  # TODO: enabling the cache cause builds to be slower and slower on `master`. Re-enable once this is investigated/fixed
  # cache:
  #   # cache per branch
  #   key: $CI_COMMIT_REF_NAME
  #   paths:
  #     - $OMNIBUS_BASE_DIR
  artifacts:
    expire_in: 2 weeks
    paths:
      - $OMNIBUS_PACKAGE_DIR


# build Dogstastd package for rpm-x64
dogstatsd_suse-x64:
  stage: package_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-builders/suse_x64:$DATADOG_AGENT_BUILDERS
  tags: [ "runner:main", "size:large" ]
  <<: *skip_when_unwanted_on_7
  variables:
    AWS_CONTAINER_CREDENTIALS_RELATIVE_URI: /credentials
  script:
    # remove artifacts from previous pipelines that may come from the cache
    - rm -rf $OMNIBUS_PACKAGE_DIR/*
    # Artifacts and cache must live within project directory but we run omnibus
    # from the GOPATH (see above). We then call `invoke` passing --base-dir,
    # pointing to a gitlab-friendly location.
    - set +x
    - RPM_GPG_KEY=$(aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.rpm_signing_private_key --with-decryption --query "Parameter.Value" --out text)
    - printf -- "$RPM_GPG_KEY" | gpg --import --batch
    - export RPM_SIGNING_PASSPHRASE=$(aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.rpm_signing_key_passphrase --with-decryption --query "Parameter.Value" --out text)
    - set -x
    # Use --skip-deps since the deps are installed by `before_script`.
    - inv -e dogstatsd.omnibus-build --release-version "$RELEASE_VERSION_7" --major-version 7 --base-dir $OMNIBUS_BASE_DIR_SUSE ${USE_S3_CACHING} --skip-deps
    - find $OMNIBUS_BASE_DIR_SUSE/pkg -type f -name '*.rpm' -print0 | sort -z | xargs -0 -I '{}' rpm -i '{}'
    - mkdir -p $OMNIBUS_PACKAGE_DIR_SUSE && cp $OMNIBUS_BASE_DIR_SUSE/pkg/*.{rpm,metadata.json} $OMNIBUS_PACKAGE_DIR_SUSE
  # TODO: enabling the cache cause builds to be slower and slower on `master`. Re-enable once this is investigated/fixed
  # cache:
  #   # cache per branch
  #   key: $CI_COMMIT_REF_NAME
  #   paths:
  #     - $OMNIBUS_BASE_DIR_SUSE
  artifacts:
    expire_in: 2 weeks
    paths:
      - $OMNIBUS_PACKAGE_DIR_SUSE

# deploy debian packages to apt staging repo
deploy_deb_testing-a6:
  stage: testkitchen_deploy

  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-builders/deploy:$DATADOG_AGENT_BUILDERS
  before_script:
    - ls $OMNIBUS_PACKAGE_DIR
  <<: *run_when_testkitchen_triggered
  <<: *skip_when_unwanted_on_6
  tags: [ "runner:main", "size:large" ]
  variables:
    DD_PIPELINE_ID: $CI_PIPELINE_ID-a6
  script:
    - source /usr/local/rvm/scripts/rvm
    - rvm use 2.4

    - set +x # make sure we don't output the creds to the build log

    - APT_SIGNING_KEY_ID=$(aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.apt_signing_key_id --with-decryption --query "Parameter.Value" --out text)
    - APT_SIGNING_PRIVATE_KEY_PART1=$(aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.apt_signing_private_key_part1 --with-decryption --query "Parameter.Value" --out text)
    - APT_SIGNING_PRIVATE_KEY_PART2=$(aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.apt_signing_private_key_part2 --with-decryption --query "Parameter.Value" --out text)
    - APT_SIGNING_KEY_PASSPHRASE=$(aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.apt_signing_key_passphrase --with-decryption --query "Parameter.Value" --out text)

    - echo "$APT_SIGNING_KEY_ID"
    - printf -- "$APT_SIGNING_PRIVATE_KEY_PART1\n$APT_SIGNING_PRIVATE_KEY_PART2\n" | gpg --import --batch

    - echo "$APT_SIGNING_KEY_PASSPHRASE" | deb-s3 upload -c "pipeline-$DD_PIPELINE_ID" -m 6 -b $DEB_TESTING_S3_BUCKET -a amd64 --sign=$APT_SIGNING_KEY_ID --gpg_options="--passphrase-fd 0 --pinentry-mode loopback --batch --digest-algo SHA512" --preserve_versions --visibility public $OMNIBUS_PACKAGE_DIR/datadog-*_6*amd64.deb
    - echo "$APT_SIGNING_KEY_PASSPHRASE" | deb-s3 upload -c "pipeline-$DD_PIPELINE_ID" -m 6 -b $DEB_TESTING_S3_BUCKET -a x86_64 --sign=$APT_SIGNING_KEY_ID --gpg_options="--passphrase-fd 0 --pinentry-mode loopback --batch --digest-algo SHA512" --preserve_versions --visibility public $OMNIBUS_PACKAGE_DIR/datadog-*_6*amd64.deb

deploy_deb_testing-a7:
  stage: testkitchen_deploy

  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-builders/deploy:$DATADOG_AGENT_BUILDERS
  before_script:
    - ls $OMNIBUS_PACKAGE_DIR
  <<: *run_when_testkitchen_triggered
  <<: *skip_when_unwanted_on_7
  tags: [ "runner:main", "size:large" ]
  variables:
    DD_PIPELINE_ID: $CI_PIPELINE_ID-a7
  script:
    - source /usr/local/rvm/scripts/rvm
    - rvm use 2.4

    - set +x # make sure we don't output the creds to the build log

    - APT_SIGNING_KEY_ID=$(aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.apt_signing_key_id --with-decryption --query "Parameter.Value" --out text)
    - APT_SIGNING_PRIVATE_KEY_PART1=$(aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.apt_signing_private_key_part1 --with-decryption --query "Parameter.Value" --out text)
    - APT_SIGNING_PRIVATE_KEY_PART2=$(aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.apt_signing_private_key_part2 --with-decryption --query "Parameter.Value" --out text)
    - APT_SIGNING_KEY_PASSPHRASE=$(aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.apt_signing_key_passphrase --with-decryption --query "Parameter.Value" --out text)

    - echo "$APT_SIGNING_KEY_ID"
    - printf -- "$APT_SIGNING_PRIVATE_KEY_PART1\n$APT_SIGNING_PRIVATE_KEY_PART2\n" | gpg --import --batch

    - echo "$APT_SIGNING_KEY_PASSPHRASE" | deb-s3 upload -c "pipeline-$DD_PIPELINE_ID" -m 7 -b $DEB_TESTING_S3_BUCKET -a amd64 --sign=$APT_SIGNING_KEY_ID --gpg_options="--passphrase-fd 0 --pinentry-mode loopback --batch --digest-algo SHA512" --preserve_versions --visibility public $OMNIBUS_PACKAGE_DIR/datadog-*_7*amd64.deb
    - echo "$APT_SIGNING_KEY_PASSPHRASE" | deb-s3 upload -c "pipeline-$DD_PIPELINE_ID" -m 7 -b $DEB_TESTING_S3_BUCKET -a x86_64 --sign=$APT_SIGNING_KEY_ID --gpg_options="--passphrase-fd 0 --pinentry-mode loopback --batch --digest-algo SHA512" --preserve_versions --visibility public $OMNIBUS_PACKAGE_DIR/datadog-*_7*amd64.deb


# deploy rpm packages to yum staging repo
deploy_rpm_testing-a6:
  <<: *run_when_testkitchen_triggered
  <<: *skip_when_unwanted_on_6
  stage: testkitchen_deploy

  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-builders/deploy:$DATADOG_AGENT_BUILDERS
  before_script:
    - ls $OMNIBUS_PACKAGE_DIR
  tags: [ "runner:main", "size:large" ]
  variables:
    DD_PIPELINE_ID: $CI_PIPELINE_ID-a6
  script:
    - source /usr/local/rvm/scripts/rvm
    - rvm use 2.4
    - mkdir -p ./rpmrepo/x86_64/
    - aws s3 sync s3://$RPM_TESTING_S3_BUCKET/pipeline-$DD_PIPELINE_ID/6 ./rpmrepo/
    - cp $OMNIBUS_PACKAGE_DIR/datadog-*-6.*x86_64.rpm ./rpmrepo/x86_64/
    - createrepo --update -v --checksum sha ./rpmrepo/x86_64
    - aws s3 sync ./rpmrepo/ s3://$RPM_TESTING_S3_BUCKET/pipeline-$DD_PIPELINE_ID/6 --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers full=id=3a6e02b08553fd157ae3fb918945dd1eaae5a1aa818940381ef07a430cf25732

deploy_rpm_testing-a7:
  <<: *run_when_testkitchen_triggered
  <<: *skip_when_unwanted_on_7
  stage: testkitchen_deploy

  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-builders/deploy:$DATADOG_AGENT_BUILDERS
  before_script:
    - ls $OMNIBUS_PACKAGE_DIR
  tags: [ "runner:main", "size:large" ]
  variables:
    DD_PIPELINE_ID: $CI_PIPELINE_ID-a7
  script:
    - source /usr/local/rvm/scripts/rvm
    - rvm use 2.4
    - mkdir -p ./rpmrepo/x86_64/
    - aws s3 sync s3://$RPM_TESTING_S3_BUCKET/pipeline-$DD_PIPELINE_ID/7 ./rpmrepo/
    - cp $OMNIBUS_PACKAGE_DIR/datadog-*-7.*x86_64.rpm ./rpmrepo/x86_64/
    - createrepo --update -v --checksum sha ./rpmrepo/x86_64
    - aws s3 sync ./rpmrepo/ s3://$RPM_TESTING_S3_BUCKET/pipeline-$DD_PIPELINE_ID/7 --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers full=id=3a6e02b08553fd157ae3fb918945dd1eaae5a1aa818940381ef07a430cf25732

# deploy rpm packages to yum staging repo
deploy_suse_rpm_testing-a6:
  <<: *run_when_testkitchen_triggered
  <<: *skip_when_unwanted_on_6
  stage: testkitchen_deploy

  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-builders/deploy:$DATADOG_AGENT_BUILDERS
  before_script:
    - ls $OMNIBUS_PACKAGE_DIR_SUSE
  tags: [ "runner:main", "size:large" ]
  variables:
    DD_PIPELINE_ID: $CI_PIPELINE_ID-a6
  script:
    - source /usr/local/rvm/scripts/rvm
    - rvm use 2.4
    - mkdir -p ./rpmrepo/suse/x86_64/
    - aws s3 sync s3://$RPM_TESTING_S3_BUCKET/suse/pipeline-$DD_PIPELINE_ID/6 ./rpmrepo/suse
    - cp $OMNIBUS_PACKAGE_DIR_SUSE/datadog-*-6.*x86_64.rpm ./rpmrepo/suse/x86_64/
    - createrepo --update -v --checksum sha ./rpmrepo/suse/x86_64
    - aws s3 sync ./rpmrepo/suse/ s3://$RPM_TESTING_S3_BUCKET/suse/pipeline-$DD_PIPELINE_ID/6 --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers full=id=3a6e02b08553fd157ae3fb918945dd1eaae5a1aa818940381ef07a430cf25732

deploy_suse_rpm_testing-a7:
  <<: *run_when_testkitchen_triggered
  <<: *skip_when_unwanted_on_7
  stage: testkitchen_deploy

  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-builders/deploy:$DATADOG_AGENT_BUILDERS
  before_script:
    - ls $OMNIBUS_PACKAGE_DIR_SUSE
  tags: [ "runner:main", "size:large" ]
  variables:
    DD_PIPELINE_ID: $CI_PIPELINE_ID-a7
  script:
    - source /usr/local/rvm/scripts/rvm
    - rvm use 2.4
    - mkdir -p ./rpmrepo/suse/x86_64/
    - aws s3 sync s3://$RPM_TESTING_S3_BUCKET/suse/pipeline-$DD_PIPELINE_ID/7 ./rpmrepo/suse
    - cp $OMNIBUS_PACKAGE_DIR_SUSE/datadog-*-7.*x86_64.rpm ./rpmrepo/suse/x86_64/
    - createrepo --update -v --checksum sha ./rpmrepo/suse/x86_64
    - aws s3 sync ./rpmrepo/suse/ s3://$RPM_TESTING_S3_BUCKET/suse/pipeline-$DD_PIPELINE_ID/7 --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers full=id=3a6e02b08553fd157ae3fb918945dd1eaae5a1aa818940381ef07a430cf25732

# deploy windows packages to our testing bucket
deploy_windows_testing-a6:
  <<: *run_when_testkitchen_triggered
  <<: *skip_when_unwanted_on_6
  stage: testkitchen_deploy

  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-builders/deploy:$DATADOG_AGENT_BUILDERS
  before_script:
    - ls $OMNIBUS_PACKAGE_DIR
  tags: [ "runner:main", "size:large" ]
  script:
    - $S3_CP_CMD --recursive --exclude "*" --include "datadog-agent-6.*.msi" $OMNIBUS_PACKAGE_DIR s3://$WINDOWS_TESTING_S3_BUCKET_A6 --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers full=id=3a6e02b08553fd157ae3fb918945dd1eaae5a1aa818940381ef07a430cf25732

deploy_windows_testing-a7:
  <<: *run_when_testkitchen_triggered
  <<: *skip_when_unwanted_on_7
  stage: testkitchen_deploy

  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-builders/deploy:$DATADOG_AGENT_BUILDERS
  before_script:
    - ls $OMNIBUS_PACKAGE_DIR
  tags: [ "runner:main", "size:large" ]
  script:
    - $S3_CP_CMD --recursive --exclude "*" --include "datadog-agent-7.*.msi" $OMNIBUS_PACKAGE_DIR s3://$WINDOWS_TESTING_S3_BUCKET_A7 --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers full=id=3a6e02b08553fd157ae3fb918945dd1eaae5a1aa818940381ef07a430cf25732

#
# Kitchen Test Common templates
#

.kitchen_common: &kitchen_common
  <<: *run_when_testkitchen_triggered
  stage: testkitchen_testing
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-builders/dd-agent-testing:$DATADOG_AGENT_BUILDERS
  artifacts:
    expire_in: 2 weeks
    when: always
    paths:
      - $CI_PROJECT_DIR/kitchen_logs
  tags: [ "runner:main", "size:large" ]
  retry: 1

.kitchen_a6_common: &kitchen_a6_common
  variables:
    AGENT_MAJOR_VERSION: 6
    DD_PIPELINE_ID: $CI_PIPELINE_ID-a6

.kitchen_a7_common: &kitchen_a7_common
  variables:
    AGENT_MAJOR_VERSION: 7
    DD_PIPELINE_ID: $CI_PIPELINE_ID-a7

.kitchen_chef_common: &kitchen_chef_common
  script:
    - AZURE_LOCATION='North Central US' bash -l tasks/run-test-kitchen.sh chef-test $AGENT_MAJOR_VERSION

.kitchen_step_by_step_common: &kitchen_step_by_step_common
  script:
    - AZURE_LOCATION='Central US' bash -l tasks/run-test-kitchen.sh step-by-step-test $AGENT_MAJOR_VERSION

.kitchen_install_script_common: &kitchen_install_script_common
  script:
    - AZURE_LOCATION='South Central US' bash -l tasks/run-test-kitchen.sh install-script-test $AGENT_MAJOR_VERSION

.kitchen_upgrade5_common: &kitchen_upgrade5_common
  script:
    - AZURE_LOCATION='Central US' bash -l tasks/run-test-kitchen.sh upgrade5-test $AGENT_MAJOR_VERSION

.kitchen_upgrade6_common: &kitchen_upgrade6_common
  script:
    - AZURE_LOCATION='South Central US' bash -l tasks/run-test-kitchen.sh upgrade6-test $AGENT_MAJOR_VERSION

.kitchen_windows_installer_common: &kitchen_windows_installer_common
  <<: *kitchen_common
  script:
    - rsync -azr --delete ./ $SRC_PATH
    - export TEST_PLATFORMS="win2012,urn,MicrosoftWindowsServer:WindowsServer:2012-Datacenter:3.127.20190603"
    - cd $DD_AGENT_TESTING_DIR
    - bash -l tasks/kitchen_setup.sh
    - AZURE_LOCATION='North Central US' bash -l tasks/run-test-kitchen.sh windows-install-test $AGENT_MAJOR_VERSION

.kitchen_windows_a6_common: &kitchen_windows_a6_common
  <<: *kitchen_common
  <<: *kitchen_a6_common

  before_script:
    - rsync -azr --delete ./ $SRC_PATH
    - export WINDOWS_TESTING_S3_BUCKET=$WINDOWS_TESTING_S3_BUCKET_A6
    - export TEST_PLATFORMS="win2008r2,id,/subscriptions/8c56d827-5f07-45ce-8f2b-6c5001db5c6f/resourceGroups/kitchen-test-images/providers/Microsoft.Compute/galleries/kitchenimages/images/Windows2008-R2-SP1/versions/1.0.0"
    - export TEST_PLATFORMS="$TEST_PLATFORMS|win2012,urn,MicrosoftWindowsServer:WindowsServer:2012-Datacenter:3.127.20190603"
    - export TEST_PLATFORMS="$TEST_PLATFORMS|win2012r2,urn,MicrosoftWindowsServer:WindowsServer:2012-R2-Datacenter:4.127.20190603"
    - export TEST_PLATFORMS="$TEST_PLATFORMS|win2016,urn,MicrosoftWindowsServer:WindowsServer:2016-Datacenter-Server-Core:2016.127.20190603"
    - export TEST_PLATFORMS="$TEST_PLATFORMS|win2019,urn,MicrosoftWindowsServer:WindowsServer:2019-Datacenter-Core:2019.0.20190603"
    - cd $DD_AGENT_TESTING_DIR
    - bash -l tasks/kitchen_setup.sh

.kitchen_windows_a7_common: &kitchen_windows_a7_common
  <<: *kitchen_common
  <<: *kitchen_a7_common

  before_script:
    - rsync -azr --delete ./ $SRC_PATH
    - export WINDOWS_TESTING_S3_BUCKET=$WINDOWS_TESTING_S3_BUCKET_A7
    - export TEST_PLATFORMS="win2008r2,id,/subscriptions/8c56d827-5f07-45ce-8f2b-6c5001db5c6f/resourceGroups/kitchen-test-images/providers/Microsoft.Compute/galleries/kitchenimages/images/Windows2008-R2-SP1/versions/1.0.0"
    - export TEST_PLATFORMS="$TEST_PLATFORMS|win2012,urn,MicrosoftWindowsServer:WindowsServer:2012-Datacenter:3.127.20190603"
    - export TEST_PLATFORMS="$TEST_PLATFORMS|win2012r2,urn,MicrosoftWindowsServer:WindowsServer:2012-R2-Datacenter:4.127.20190603"
    - export TEST_PLATFORMS="$TEST_PLATFORMS|win2016,urn,MicrosoftWindowsServer:WindowsServer:2016-Datacenter-Server-Core:2016.127.20190603"
    - export TEST_PLATFORMS="$TEST_PLATFORMS|win2019,urn,MicrosoftWindowsServer:WindowsServer:2019-Datacenter-Core:2019.0.20190603"
    - cd $DD_AGENT_TESTING_DIR
    - bash -l tasks/kitchen_setup.sh

.kitchen_centos_common: &kitchen_centos_common
  <<: *kitchen_common

  before_script:
    - rsync -azr --delete ./ $SRC_PATH
    - export TEST_PLATFORMS="centos-69,urn,OpenLogic:CentOS:6.9:6.9.20180530"
    - export TEST_PLATFORMS="$TEST_PLATFORMS|centos-76,urn,OpenLogic:CentOS:7.6:7.6.20190402"
    - export TEST_PLATFORMS="$TEST_PLATFORMS|rhel-80,urn,RedHat:RHEL:8:8.0.2019062020"
    - cd $DD_AGENT_TESTING_DIR
    - bash -l tasks/kitchen_setup.sh

.kitchen_ubuntu_common: &kitchen_ubuntu_common
  <<: *kitchen_common

  before_script:
    - rsync -azr --delete ./ $SRC_PATH
    - export TEST_PLATFORMS="ubuntu-14-04,urn,Canonical:UbuntuServer:14.04.5-LTS:14.04.201905140"
    - export TEST_PLATFORMS="$TEST_PLATFORMS|ubuntu-16-04,urn,Canonical:UbuntuServer:16.04.0-LTS:16.04.201906170"
    - export TEST_PLATFORMS="$TEST_PLATFORMS|ubuntu-18-04,urn,Canonical:UbuntuServer:18.04-LTS:18.04.201906040"
    - cd $DD_AGENT_TESTING_DIR
    - bash -l tasks/kitchen_setup.sh

.kitchen_suse_common: &kitchen_suse_common
  <<: *kitchen_common

  before_script:
    - rsync -azr --delete ./ $SRC_PATH
    - export TEST_PLATFORMS="sles-11,id,/subscriptions/8c56d827-5f07-45ce-8f2b-6c5001db5c6f/resourceGroups/kitchen-test-images/providers/Microsoft.Compute/galleries/kitchenimages/images/SLES-11-SP4/versions/1.0.0"
    - export TEST_PLATFORMS="$TEST_PLATFORMS|sles-12,urn,SUSE:SLES:12-SP4:2019.06.17"
    - export TEST_PLATFORMS="$TEST_PLATFORMS|sles-15,urn,SUSE:SLES-BYOS:15:2019.11.15"
    - cd $DD_AGENT_TESTING_DIR
    - bash -l tasks/kitchen_setup.sh

.kitchen_debian_common: &kitchen_debian_common
  <<: *kitchen_common

  before_script:
    - rsync -azr --delete ./ $SRC_PATH
    - export TEST_PLATFORMS="debian-8,urn,credativ:Debian:8:8.20190313.0"
    - export TEST_PLATFORMS="$TEST_PLATFORMS|debian-9,urn,credativ:Debian:9:9.20190515.0"
    - export TEST_PLATFORMS="$TEST_PLATFORMS|debian-10,urn,Debian:debian-10:10:0.20190709.401"
    - cd $DD_AGENT_TESTING_DIR
    - bash -l tasks/kitchen_setup.sh

# run dd-agent-testing for the windows installer
kitchen_windows_installer-a6:
  allow_failure: true
  <<: *skip_when_unwanted_on_6
  <<: *kitchen_windows_installer_common
  <<: *kitchen_a6_common

  before_script:
    - export WINDOWS_TESTING_S3_BUCKET=$WINDOWS_TESTING_S3_BUCKET_A6
  retry: 0

kitchen_windows_installer-a7:
  allow_failure: true
  <<: *skip_when_unwanted_on_7
  <<: *kitchen_windows_installer_common
  <<: *kitchen_a7_common

  before_script:
    - export WINDOWS_TESTING_S3_BUCKET=$WINDOWS_TESTING_S3_BUCKET_A7
  retry: 0

# run dd-agent-testing on windows
kitchen_windows_chef-a6:
  allow_failure: false
  <<: *skip_when_unwanted_on_6
  <<: *kitchen_windows_a6_common
  <<: *kitchen_chef_common

kitchen_windows_chef-a7:
  allow_failure: false
  <<: *skip_when_unwanted_on_7
  <<: *kitchen_windows_a7_common
  <<: *kitchen_chef_common

kitchen_windows_upgrade5-a6:
  allow_failure: false
  <<: *skip_when_unwanted_on_6
  <<: *kitchen_windows_a6_common
  <<: *kitchen_upgrade5_common

kitchen_windows_upgrade5-a7:
  allow_failure: false
  <<: *skip_when_unwanted_on_7
  <<: *kitchen_windows_a7_common
  <<: *kitchen_upgrade5_common

kitchen_windows_upgrade6-a6:
  allow_failure: false
  <<: *skip_when_unwanted_on_6
  <<: *kitchen_windows_a6_common
  <<: *kitchen_upgrade6_common

kitchen_windows_upgrade6-a7:
  allow_failure: false
  <<: *skip_when_unwanted_on_7
  <<: *kitchen_windows_a7_common
  <<: *kitchen_upgrade6_common

# run dd-agent-testing on centos
kitchen_centos_chef-a6:
  allow_failure: false
  <<: *skip_when_unwanted_on_6
  <<: *kitchen_centos_common
  <<: *kitchen_a6_common
  <<: *kitchen_chef_common

kitchen_centos_chef-a7:
  allow_failure: false
  <<: *skip_when_unwanted_on_7
  <<: *kitchen_centos_common
  <<: *kitchen_a7_common
  <<: *kitchen_chef_common

kitchen_centos_install_script-a6:
  allow_failure: false
  <<: *skip_when_unwanted_on_6
  <<: *kitchen_centos_common
  <<: *kitchen_a6_common
  <<: *kitchen_install_script_common

kitchen_centos_install_script-a7:
  allow_failure: false
  <<: *skip_when_unwanted_on_7
  <<: *kitchen_centos_common
  <<: *kitchen_a7_common
  <<: *kitchen_install_script_common

kitchen_centos_step_by_step-a6:
  allow_failure: false
  <<: *skip_when_unwanted_on_6
  <<: *kitchen_centos_common
  <<: *kitchen_a6_common
  <<: *kitchen_step_by_step_common

kitchen_centos_step_by_step-a7:
  allow_failure: false
  <<: *skip_when_unwanted_on_7
  <<: *kitchen_centos_common
  <<: *kitchen_a7_common
  <<: *kitchen_step_by_step_common

kitchen_centos_upgrade5-a6:
  allow_failure: false
  <<: *skip_when_unwanted_on_6
  <<: *kitchen_centos_common
  <<: *kitchen_a6_common
  <<: *kitchen_upgrade5_common

kitchen_centos_upgrade5-a7:
  allow_failure: false
  <<: *skip_when_unwanted_on_7
  <<: *kitchen_centos_common
  <<: *kitchen_a7_common
  <<: *kitchen_upgrade5_common

kitchen_centos_upgrade6-a6:
  allow_failure: false
  <<: *skip_when_unwanted_on_6
  <<: *kitchen_centos_common
  <<: *kitchen_a6_common
  <<: *kitchen_upgrade6_common

kitchen_centos_upgrade6-a7:
  allow_failure: false
  <<: *skip_when_unwanted_on_7
  <<: *kitchen_centos_common
  <<: *kitchen_a7_common
  <<: *kitchen_upgrade6_common

# run dd-agent-testing on ubuntu
# Could fail if we encounter the issue with apt locks/azure agent, but should be investigated if that's the case
kitchen_ubuntu_chef-a6:
  allow_failure: false
  <<: *skip_when_unwanted_on_6
  <<: *kitchen_ubuntu_common
  <<: *kitchen_a6_common
  <<: *kitchen_chef_common

kitchen_ubuntu_chef-a7:
  allow_failure: false
  <<: *skip_when_unwanted_on_7
  <<: *kitchen_ubuntu_common
  <<: *kitchen_a7_common
  <<: *kitchen_chef_common

kitchen_ubuntu_install_script-a6:
  allow_failure: false
  <<: *skip_when_unwanted_on_6
  <<: *kitchen_ubuntu_common
  <<: *kitchen_a6_common
  <<: *kitchen_install_script_common

kitchen_ubuntu_install_script-a7:
  allow_failure: false
  <<: *skip_when_unwanted_on_7
  <<: *kitchen_ubuntu_common
  <<: *kitchen_a7_common
  <<: *kitchen_install_script_common

kitchen_ubuntu_step_by_step-a6:
  allow_failure: false
  <<: *skip_when_unwanted_on_6
  <<: *kitchen_ubuntu_common
  <<: *kitchen_a6_common
  <<: *kitchen_step_by_step_common

kitchen_ubuntu_step_by_step-a7:
  allow_failure: false
  <<: *skip_when_unwanted_on_7
  <<: *kitchen_ubuntu_common
  <<: *kitchen_a7_common
  <<: *kitchen_step_by_step_common

kitchen_ubuntu_upgrade5-a6:
  allow_failure: false
  <<: *skip_when_unwanted_on_6
  <<: *kitchen_ubuntu_common
  <<: *kitchen_a6_common
  <<: *kitchen_upgrade5_common

kitchen_ubuntu_upgrade5-a7:
  allow_failure: false
  <<: *skip_when_unwanted_on_7
  <<: *kitchen_ubuntu_common
  <<: *kitchen_a7_common
  <<: *kitchen_upgrade5_common

kitchen_ubuntu_upgrade6-a6:
  allow_failure: false
  <<: *skip_when_unwanted_on_6
  <<: *kitchen_ubuntu_common
  <<: *kitchen_a6_common
  <<: *kitchen_upgrade6_common

kitchen_ubuntu_upgrade6-a7:
  allow_failure: false
  <<: *skip_when_unwanted_on_7
  <<: *kitchen_ubuntu_common
  <<: *kitchen_a7_common
  <<: *kitchen_upgrade6_common

# run dd-agent-testing on suse
kitchen_suse_chef-a6:
  allow_failure: false
  <<: *skip_when_unwanted_on_6
  <<: *kitchen_suse_common
  <<: *kitchen_a6_common
  <<: *kitchen_chef_common

kitchen_suse_chef-a7:
  allow_failure: false
  <<: *skip_when_unwanted_on_7
  <<: *kitchen_suse_common
  <<: *kitchen_a7_common
  <<: *kitchen_chef_common

kitchen_suse_install_script-a6:
  allow_failure: false
  <<: *skip_when_unwanted_on_6
  <<: *kitchen_suse_common
  <<: *kitchen_a6_common
  <<: *kitchen_install_script_common

kitchen_suse_install_script-a7:
  allow_failure: false
  <<: *skip_when_unwanted_on_7
  <<: *kitchen_suse_common
  <<: *kitchen_a7_common
  <<: *kitchen_install_script_common

kitchen_suse_step_by_step-a6:
  allow_failure: false
  <<: *skip_when_unwanted_on_6
  <<: *kitchen_suse_common
  <<: *kitchen_a6_common
  <<: *kitchen_step_by_step_common

kitchen_suse_step_by_step-a7:
  allow_failure: false
  <<: *skip_when_unwanted_on_7
  <<: *kitchen_suse_common
  <<: *kitchen_a7_common
  <<: *kitchen_step_by_step_common

kitchen_suse_upgrade5-a6:
  allow_failure: false
  <<: *skip_when_unwanted_on_6
  <<: *kitchen_suse_common
  <<: *kitchen_a6_common
  <<: *kitchen_upgrade5_common

kitchen_suse_upgrade5-a7:
  allow_failure: false
  <<: *skip_when_unwanted_on_7
  <<: *kitchen_suse_common
  <<: *kitchen_a7_common
  <<: *kitchen_upgrade5_common

kitchen_suse_upgrade6-a6:
  allow_failure: false
  <<: *skip_when_unwanted_on_6
  <<: *kitchen_suse_common
  <<: *kitchen_a6_common
  <<: *kitchen_upgrade6_common

kitchen_suse_upgrade6-a7:
  allow_failure: false
  <<: *skip_when_unwanted_on_7
  <<: *kitchen_suse_common
  <<: *kitchen_a7_common
  <<: *kitchen_upgrade6_common

# run dd-agent-testing on debian
# Could fail if we encounter the issue with apt locks/azure agent, but should be investigated if that's the case
kitchen_debian_chef-a6:
  allow_failure: false
  <<: *skip_when_unwanted_on_6
  <<: *kitchen_debian_common
  <<: *kitchen_a6_common
  <<: *kitchen_chef_common

kitchen_debian_chef-a7:
  allow_failure: false
  <<: *skip_when_unwanted_on_7
  <<: *kitchen_debian_common
  <<: *kitchen_a7_common
  <<: *kitchen_chef_common

kitchen_debian_install_script-a6:
  allow_failure: false
  <<: *skip_when_unwanted_on_6
  <<: *kitchen_debian_common
  <<: *kitchen_a6_common
  <<: *kitchen_install_script_common

kitchen_debian_install_script-a7:
  allow_failure: false
  <<: *skip_when_unwanted_on_7
  <<: *kitchen_debian_common
  <<: *kitchen_a7_common
  <<: *kitchen_install_script_common

kitchen_debian_step_by_step-a6:
  allow_failure: false
  <<: *skip_when_unwanted_on_6
  <<: *kitchen_debian_common
  <<: *kitchen_a6_common
  <<: *kitchen_step_by_step_common

kitchen_debian_step_by_step-a7:
  allow_failure: false
  <<: *skip_when_unwanted_on_7
  <<: *kitchen_debian_common
  <<: *kitchen_a7_common
  <<: *kitchen_step_by_step_common

kitchen_debian_upgrade5-a6:
  allow_failure: false
  <<: *skip_when_unwanted_on_6
  <<: *kitchen_debian_common
  <<: *kitchen_a6_common
  <<: *kitchen_upgrade5_common

kitchen_debian_upgrade5-a7:
  allow_failure: false
  <<: *skip_when_unwanted_on_7
  <<: *kitchen_debian_common
  <<: *kitchen_a7_common
  <<: *kitchen_upgrade5_common

kitchen_debian_upgrade6-a6:
  allow_failure: false
  <<: *skip_when_unwanted_on_6
  <<: *kitchen_debian_common
  <<: *kitchen_a6_common
  <<: *kitchen_upgrade6_common

kitchen_debian_upgrade6-a7:
  allow_failure: false
  <<: *skip_when_unwanted_on_7
  <<: *kitchen_debian_common
  <<: *kitchen_a7_common
  <<: *kitchen_upgrade6_common


.kitchen_cleanup_s3_common: &kitchen_cleanup_s3_common
  script:
    - aws s3 rm s3://$DEB_TESTING_S3_BUCKET/dists/pipeline-$DD_PIPELINE_ID --recursive
    - aws s3 rm s3://$RPM_TESTING_S3_BUCKET/pipeline-$DD_PIPELINE_ID --recursive
    - aws s3 rm s3://$RPM_TESTING_S3_BUCKET/suse/pipeline-$DD_PIPELINE_ID --recursive
    - aws s3 rm s3://$WINDOWS_TESTING_S3_BUCKET_A6 --recursive
    - cd $OMNIBUS_PACKAGE_DIR
    - for deb in $(ls *amd64.deb); do aws s3 rm s3://$DEB_TESTING_S3_BUCKET/pool/d/da/$deb --recursive; done

# kitchen tests cleanup
testkitchen_cleanup_s3-a6:
  stage: testkitchen_cleanup
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-builders/deploy:$DATADOG_AGENT_BUILDERS
  <<: *run_when_testkitchen_triggered
  tags: [ "runner:main", "size:large" ]
  variables:
    DD_PIPELINE_ID: $CI_PIPELINE_ID-a6
  before_script:
    - ls
  # even if this fails, it shouldn't block the pipeline.
  allow_failure: true
  when: always
  <<: *kitchen_cleanup_s3_common

testkitchen_cleanup_s3-a7:
  stage: testkitchen_cleanup
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-builders/deploy:$DATADOG_AGENT_BUILDERS
  <<: *run_when_testkitchen_triggered
  tags: [ "runner:main", "size:large" ]
  variables:
    DD_PIPELINE_ID: $CI_PIPELINE_ID-a7
  before_script:
    - ls
  # even if this fails, it shouldn't block the pipeline.
  allow_failure: true
  when: always
  <<: *kitchen_cleanup_s3_common

# run dd-agent-testing
testkitchen_cleanup_azure-a6:
  stage: testkitchen_cleanup
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-builders/dd-agent-testing:$DATADOG_AGENT_BUILDERS
  <<: *run_when_testkitchen_triggered
  # even if this fails, it shouldn't block the pipeline.
  allow_failure: true
  when: always
  tags: [ "runner:main", "size:large" ]
  variables:
    DD_PIPELINE_ID: $CI_PIPELINE_ID-a6
  before_script:
    - rsync -azr --delete ./ $SRC_PATH
  script:
    - cd $DD_AGENT_TESTING_DIR
    - bash -l tasks/clean.sh

testkitchen_cleanup_azure-a7:
  stage: testkitchen_cleanup
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-builders/dd-agent-testing:$DATADOG_AGENT_BUILDERS
  <<: *run_when_testkitchen_triggered
  # even if this fails, it shouldn't block the pipeline.
  allow_failure: true
  when: always
  tags: [ "runner:main", "size:large" ]
  variables:
    DD_PIPELINE_ID: $CI_PIPELINE_ID-a7
  before_script:
    - rsync -azr --delete ./ $SRC_PATH
  script:
    - cd $DD_AGENT_TESTING_DIR
    - bash -l tasks/clean.sh
